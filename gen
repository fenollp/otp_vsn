#!/usr/bin/env python3

# Generate include/otp_vsn.hrl from list of OTP releases
# Usage: $0  releases_list.txt

import re
import sys

if len(sys.argv) != 2:
    print('Usage:', sys.argv[0], 'releases_list.txt', file=sys.stderr)
    sys.exit(1)

MIN_REL = 16
COPYR = '''%% Copyright © 2018 Pierre Fenoll ‹pierrefenoll@gmail.com›
%% See LICENSE for licensing information.
%% -*- coding: utf-8 -*-
%% Auto-generated file. See https://github.com/fenollp/otp_vsn
'''

def unR(rel):
    if rel == 'R16B':
        return ('16', '0', '0')
    if rel == 'R16B01':
        return ('16', '1', '0')
    if rel == 'R16B02':
        return ('16', '2', '0')
    if rel == 'R16B03':
        return ('16', '3', '0')
    if rel == 'R16B03-1':
        return ('16', '3', '1')
    two_or_three = rel.split('.')
    if len(two_or_three) == 3:
        return tuple(two_or_three)
    return tuple(two_or_three + ['0'])

regexp = re.compile(r'^(\d\d\.\d\d?(\.\d\d?)?|R16B(\d\d)?(\-\d)?)\n')
with open(sys.argv[1], 'r') as fd:
    lines = fd.readlines()
    releases_ = [unR(line.strip()) for line in lines if re.match(regexp, line)]
releases = sorted(releases_)
print('Found', len(releases), 'releases')
for (x,y,z) in releases:
    print(x, y, z)

with open('./include/otp_vsn.hrl', 'w') as fd:
    fd.write(COPYR)
    fd.write('''-ifndef(_OTP_VSN_HRL).
-define(_OTP_VSN_HRL, true).
-ifndef(self).
-include_lib("otp_vsn/include/internal_otp_vsn.hrl").
-else.
-include("internal_otp_vsn.hrl").
-endif.
''')
    for (x,y,z) in releases:
        fd.writelines(
            ['''
-ifdef(_internal_otp_vsn_{x}_{y}_{z}).
-define(OTP_VSN, "{x}.{y}.{z}").
-define(OTP_VSN_MAJOR, {x}).
-define(OTP_VSN_MINOR, {y}).
-define(OTP_VSN_PATCH, {z}).
-define(OTP_{x}_AND_BELOW, true).
'''.format(x=x, y=y, z=z)
            ] + ['-define(OTP_{x}_AND_ABOVE, true).\n'.format(x=X)
                 for X in reversed(range(MIN_REL, 1+int(x)))
            ] + ['''-endif.
'''])
    fd.write('''
%% integer_to_list(Literal) resolves at compile time.
-define(OTP_VSN_MAJOR_STRING, integer_to_list(?OTP_VSN_MAJOR)).
-define(OTP_VSN_MINOR_STRING, integer_to_list(?OTP_VSN_MINOR)).
-define(OTP_VSN_PATCH_STRING, integer_to_list(?OTP_VSN_PATCH)).

-endif.
''')
